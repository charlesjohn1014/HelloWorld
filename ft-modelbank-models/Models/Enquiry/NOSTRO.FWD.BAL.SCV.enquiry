Enquiry "NOSTRO.FWD.BAL.SCV" for "name:/AC_EntryCreation:STMT.ENTRY#" {
    metamodelVersion: "1.30.6"
    description {
        en = "Forward Account Statement"
    }

    zero-records-display: true
    no-selection: true
    start-line: 4
    end-line: 99 fixed-selection "VALUE.DATE" {
        Greater "!TODAY"
    }

    fixed-sort: "VALUE.DATE" Null
    custom-selection {

        field "VALUE.DATE" {
            label {
                en = "Value Date"
            }

            operands: LessThan, LessOrEquals
        }

        AND

        field "ACCOUNT.ID" {
            mandatory: true
            label {
                en = "Account Id"
            }

            operands: Equals
        }

        AND

        field "LONG.POS.SIGN" {
            label {
                en = "Long Position Sign"
            }

            operands: Equals
        }

        None
    }

    field "HEADER" {
        display-type: "CLASS-ENQ.H.TITLE"
        comma-separator: false
        display-section: Header
        operation: constant "\"Nostro Forward Balances\""
    }

    field "HDR1" {
        display-type: "CLASS-ENQ.ID.LABEL"
        length: 16
        alignment: Left
        comma-separator: false
        display-section: Header
        operation: constant "\"Customer:\""
    }

    field "H.ACCOUNT" {
        display-type: "CLASS-ENQ.H.ID" break-condition {
            break: Page
        }

        length: 16
        alignment: Left
        comma-separator: false
        display-section: Header
        processing-mode: Single
        operation: application-field-name "ACCOUNT.NUMBER"
    }

    field "HDR2" {
        display-type: "CLASS-ENQ.ID.LABEL"
        comma-separator: false
        display-section: Header
        operation: constant "\"Account No:\""
    }

    field "HDR2.02" {
        display-type: "CLASS-ENQ.ID.LABEL"
        comma-separator: false
        display-section: Header
        operation: constant "\"Ccy:\""
    }

    field "H.CUSTOMER" {
        display-type: "CLASS-ENQ.H.ID" break-condition {
            break: Page
        }

        length: 19
        alignment: Left
        comma-separator: false
        display-section: Header
        processing-mode: Single
        operation: application-field-name "ACCOUNT.NUMBER"
        conversion: getFrom "ACCOUNT" "CUSTOMER" false
    }

    field "H.CUSTOMER.NAME" {
        display-type: "CLASS-ENQ.H.ID"
        format: User break-condition {
            break: Page
        }

        length: 30
        alignment: Left
        comma-separator: false
        display-section: Header
        processing-mode: Single
        operation: application-field-name "ACCOUNT.NUMBER"
        conversion: getFrom "ACCOUNT" "CUSTOMER" false
        conversion: getFrom "CUSTOMER" "SHORT.NAME" false
    }

    field "H.CURRENCY" {
        display-type: "CLASS-ENQ.H.ID" break-condition {
            break: Page
        }

        length: 3
        alignment: Left
        comma-separator: false
        display-section: Header
        processing-mode: Single
        operation: application-field-name "ACCOUNT.NUMBER"
        conversion: getFrom "ACCOUNT" "CURRENCY" false
    }

    field "TEXT1" {
        display-type: "CLASS-ENQ.H.DATA.LABEL" break-condition {
            break: Once
        }

        comma-separator: false
        display-section: Header
        position {
            column: 3
            line: 1
        }

        operation: constant "\"Balance Brought Forward \""
    }

    field "OPENING.BALANCE" {
        break-condition {
            break: Once
        }

        length: 19
        alignment: Left
        comma-separator: false
        processing-mode: Single
        operation: application-field-name "ACCOUNT.NUMBER"
        conversion: call
        jBC: "@ ENQ.GET.BAL"
    }

    field "CURRENCY" {
        break-condition {
            break: Once
        }

        length: 3
        alignment: Left
        comma-separator: false
        processing-mode: Single
        operation: application-field-name "CURRENCY"
    }

    field "EQU.CCY" {
        break-condition {
            break: Once
        }

        length: 3
        alignment: Left
        comma-separator: false
        processing-mode: Single
        operation: application-field-name "CURRENCY"
        conversion: getFixedCcy "CURRENCY"
    }

    field "OPE.BRACK" {
        break-condition {
            break: Once
        }

        comma-separator: false
        operation: constant "\"(\""
    }

    field "CLS.BRACK" {
        break-condition {
            break: Once
        }

        comma-separator: false
        operation: constant "\")\""
    }

    field "AC.NO" {
        break-condition {
            break: Once
        }

        length: 16
        alignment: Left
        comma-separator: false
        processing-mode: Single
        operation: application-field-name "ACCOUNT.NUMBER"
    }

    field "NULL" {
        break-condition {
            break: Once
        }

        comma-separator: false
        operation: constant "\"\""
    }

    field "BACK.DATED" {
        break-condition {
            break: Once
        }

        comma-separator: false
        operation: constant "\"B/DATED\""
    }

    field "TODAY" {
        break-condition {
            break: Once
        }

        comma-separator: false
        operation: today
    }

    field "PLUS" {
        break-condition {
            break: Once
        }

        comma-separator: false
        operation: constant "\"PLUS\""
    }

    field "LONG.POS.SIGN" {
        format: User break-condition {
            break: Once
        }

        length: 5
        alignment: Left
        comma-separator: false
        operation: selection "LONG.POS.SIGN"
    }

    field "MIN.SIGN.NARR" {
        break-condition {
            break: Once
        }

        comma-separator: false
        operation: constant "\"\'-\' = Credit\""
    }

    field "MIN.NARR" {
        display-type: "CLASS-ENQ.H.DATA.LABEL" break-condition {
            break: Once
        }

        comma-separator: false
        escapeSequence: RV
        display-section: Header
        position {
            column: 50
            line: 1
        }

        operation: if "LONG.POS.SIGN" Equals "PLUS" process "MIN.SIGN.NARR" "NULL"
    }

    field "MINUS1" {
        break-condition {
            break: Once
        }

        comma-separator: false
        operation: constant "\"-1\""
    }

    field "MIN.OPEN.BAL" {
        break-condition {
            break: Once
        }

        comma-separator: false
        operation: calc "OPENING.BALANCE" * "MINUS1"
    }

    field "ADD.OPEN.BAL" {
        comments: "Used for running tota;" break-condition {
            break: Once
        }

        comma-separator: false
        operation: if "LONG.POS.SIGN" Equals "PLUS" process "MIN.OPEN.BAL" "OPENING.BALANCE"
    }

    field "BGT.FWD" {
        display-type: "CLASS-ENQ.H.DATA"
        format: Currency "CURRENCY" negative-pattern #- break-condition {
            break: Once
        }

        length: 16
        alignment: Right
        comma-separator: false
        escapeSequence: RV
        display-section: Header
        position {
            column: 50
            line: 1
        }

        operation: if "LONG.POS.SIGN" Equals "PLUS" process "MIN.OPEN.BAL" "OPENING.BALANCE"
    }

    field "@ID" {
        length: 30
        alignment: Left
        comma-separator: false
        processing-mode: Single
        operation: application-field-name "@ID"
    }

    field "VALUE.DATE" {
        length: 11
        alignment: Right
        comma-separator: false
        processing-mode: Single
        operation: application-field-name "VALUE.DATE"
    }

    field "D.VALUE.DATE" {
        label {
            en = "Value Date"
        }

        format: Date
        length: 7
        alignment: Left
        comma-separator: false
        position {
            column: 1
        }

        operation: field-extract "VALUE.DATE"
        conversion: julian
        conversion: oconv "D2E"
        conversion: convert {
            oldData: " "
        }

    }

    field "TRANSACTION.CODE" {
        label {
            en = "Description"
        }

        length: 25
        alignment: Left
        comma-separator: false
        position {
            column: 13
        }

        processing-mode: Single
        operation: application-field-name "TRANSACTION.CODE"
        conversion: getFrom "TRANSACTION" "NARRATIVE" true
    }

    field "TRANS.REFERENCE" {
        length: 60
        alignment: Left
        comma-separator: false
        processing-mode: Single
        operation: application-field-name "TRANS.REFERENCE"
    }

    field "COMPANY" {
        length: 3
        alignment: Left
        comma-separator: false
        operation: field-extract "TRANS.REFERENCE"
        conversion: extract from 2 to 1 delimited by "\\"
    }

    field "D.TRANS.REFERENCE" {
        label {
            en = "Transaction Ref"
        }

        length: 100
        alignment: Left
        comma-separator: false
        position {
            column: 33
        }

        processing-mode: Single
        operation: calc "COMPANY":"TRANS.REFERENCE"
    }

    field "BOOKING.DATE" {
        label {
            en = "Booking Date"
        }

        length: 11
        alignment: Left
        comma-separator: false
        position {
            column: 50
        }

        processing-mode: Single
        operation: application-field-name "BOOKING.DATE"
        conversion: julian
        conversion: oconv "D2E"
        conversion: convert {
            oldData: " "
        }

    }

    field "AMOUNT.FCY" {
        length: 19
        alignment: Right
        comma-separator: false
        processing-mode: Single
        operation: application-field-name "AMOUNT.FCY"
    }

    field "AMOUNT.LCY" {
        length: 19
        alignment: Right
        comma-separator: false
        processing-mode: Single
        operation: application-field-name "AMOUNT.LCY"
    }

    field "AMOUNT" {
        comma-separator: false
        operation: if "AMOUNT.FCY" Equals "NULL" process "AMOUNT.LCY" "AMOUNT.FCY"
    }

    field "MIN.AMOUNT" {
        comma-separator: false
        operation: calc "MINUS1" * "AMOUNT"
    }

    field "ADD.AMOUNT" {
        comments: "Used for running total calc."
        comma-separator: false
        operation: if "LONG.POS.SIGN" Equals "PLUS" process "MIN.AMOUNT" "AMOUNT"
    }

    field "DISP.AMOUNT" {
        label {
            en = "Balance"
        }

        format: Currency "CURRENCY" negative-pattern #-
        length: 16
        alignment: Right
        comma-separator: false
        operation: if "LONG.POS.SIGN" Equals "PLUS" process "MIN.AMOUNT" "AMOUNT"
    }

    field "BALANCE" {
        label {
            en = "Balance"
        }

        display-type: "CLASS-AMNUM"
        length: 16
        alignment: Right
        comma-separator: true
        position {
            column: 62
        }

        operation: field-extract "DISP.AMOUNT"
    }

    field "TOTAL.AMOUNT" {
        comma-separator: false
        operation: calc "TOTAL.AMOUNT" + "ADD.AMOUNT"
    }

    field "RUNNING.BALANCE" {
        comma-separator: false
        operation: calc "ADD.OPEN.BAL" + "TOTAL.AMOUNT"
    }

    field "DATE.TEST" {
        comma-separator: false
        operation: if "VALUE.DATE" LessThan "TODAY" process "BACK.DATED" "VALUE.DATE"
    }

    field "B.VALUE.DATE" {
        comma-separator: false
        operation: break-change "DATE.TEST"
    }

    field "TEXT2" {
        break-condition {
            field: "B.VALUE.DATE"
        }

        comma-separator: false
        position {
            column: 13
            line: + 1
        }

        operation: constant "\"BALANCE\""
        conversion: oconv "D2E"
        conversion: convert {
            oldData: " "
        }

        conversion: replace {
            newData: "B/DATED"
        }

    }

    field "VALUE.DATED.BAL" {
        comments: "Running balance includes this entry"
        display-type: "CLASS-AMNUM"
        format: Currency "CURRENCY" negative-pattern -# break-condition {
            field: "B.VALUE.DATE"
        }

        length: 16
        alignment: Right
        comma-separator: false
        escapeSequence: RV
        position {
            column: 62
            line: + 1
        }

        operation: field-extract "RUNNING.BALANCE"
        conversion: oconv "D2E"
        conversion: convert {
            oldData: " "
        }

        conversion: replace {
            newData: "B/DATED"
        }

    }

    field "EURO.NARR1" {
        label {
            en = "NARRATION"
        }

        break-condition {
            field: "B.VALUE.DATE"
        }

        comma-separator: false
        position {
            column: 63
            line: + 1
        }

        operation: if "EQU.CCY" Equals "NULL" process "NULL" "EQU.CCY"
    }

    field "EURO.BAL.DISP" {
        label {
            en = "BALANCE"
        }

        break-condition {
            field: "B.VALUE.DATE"
        }

        comma-separator: false
        position {
            column: 50
            line: + 1
        }

        operation: if "EQU.CCY" Equals "NULL" process "NULL" "EURO.BAL"
    }

    field "SYSTEM.ID" {
        length: 4
        alignment: Left
        comma-separator: false
        processing-mode: Single
        operation: application-field-name "SYSTEM.ID"
    }

    field "STMT.ENTRY" {
        break-condition {
            break: Once
        }

        comma-separator: false
        operation: constant "\"STMT.ENTRY\""
    }

    field "FILE" {
        comma-separator: false
        operation: field-extract "SYSTEM.ID"
        conversion: getFrom "EB.SYSTEM.ID" "APPLICATION" false
    }

    field "STR.ID" {
        comma-separator: false
        processing-mode: Single
        operation: application-field-name "TRANS.REFERENCE"
        conversion: extract from 1 to 3
    }

    field "DETAIL" {
        comma-separator: false
        operation: constant "\"COS STMT.DETAIL.DRILL \""
    }

    field "FILE1" {
        comma-separator: false
        operation: if "STR.ID" Equals "\"NET\"" process "DETAIL" "FILE"
    }

    field "APPLICATION" {
        comma-separator: false
        operation: if "FILE" Equals "NULL" process "STMT.ENTRY" "FILE1"
    }

    field "DRILL1" {
        comma-separator: false
        operation: constant "\"STMT.ENTRY.DETAIL\""
    }

    field "TRAN1" {
        comma-separator: false
        operation: field-extract "TRANS.REFERENCE"
        conversion: extract from 1 to 1 delimited by "-"
    }

    field "TRAN2" {
        comma-separator: false
        operation: field-extract "TRANS.REFERENCE"
        conversion: extract from 2 to 1 delimited by "-"
    }

    field "YR.MONTH" {
        comma-separator: false
        operation: field-extract "TRAN2"
        conversion: extract from 1 to 6
    }

    field "MINUS" {
        comma-separator: false
        operation: constant "\"-\""
    }

    field "TRAN3" {
        comma-separator: false
        operation: calc "TRAN1":"MINUS"
    }

    field "TRAN.REF" {
        comma-separator: false
        operation: calc "TRAN3":"YR.MONTH"
    }

    field "TXN.REF" {
        comma-separator: false
        operation: if "APPLICATION" Equals "STMT.ENTRY" process "@ID" "TRANS.REFERENCE"
    }

    field "STMT.ACCT" {
        comma-separator: false
        operation: constant "\"STMT.ACCT.CH\""
    }

    field "PASS.TXN.REF" {
        comma-separator: false
        operation: if "APPLICATION" Equals "STMT.ACCT" process "TRAN.REF" "TXN.REF"
    }

    field "PASS.TXN.REF1" {
        comma-separator: false
        operation: if "APPLICATION" Equals "DETAIL" process "TRAN2" "PASS.TXN.REF"
    }

    field "TXN.REF.02" {
        comma-separator: false
        operation: if "APPLICATION" Equals "STMT.ENTRY" process "@ID" "TRANS.REFERENCE"
    }

    field "NO.DETAILS" {
        display-type: "CLASS-ENQ.NORECS" break-condition {
            break: None
        }

        comma-separator: false
        position {
            column: 1
        }

        processing-mode: Single
        operation: constant "\"No Forward Movements for Account\""
    }

    field "ZERONORECORDS" {
        display-type: "CLASS-ENQ.NORECS" break-condition {
            break: None
        }

        comma-separator: false
        display-section: Header
        position {
            column: 1
        }

        operation: constant "\"No Forward Movement\""
    }

    field "SEE" {
        comma-separator: false
        operation: constant "\" S \""
    }

    field "APPL.TXN1" {
        comma-separator: false
        operation: calc "APPLICATION":"SEE"
    }

    field "APPL.TXN" {
        comma-separator: false
        operation: calc "APPL.TXN1":"PASS.TXN.REF1"
    }

    field "ENQ.TXN" {
        comma-separator: false
        operation: calc "APPLICATION":"PASS.TXN.REF1"
    }

    field "NEXT.APPL" {
        comma-separator: false
        operation: if "STR.ID" Equals "\"NET\"" process "ENQ.TXN" "APPL.TXN"
    }

    drilldown "1" {
        description {
            en = "View Transaction"
        }

        label-field: "D.TRANS.REFERENCE"
        image: "view.gif"
        from-field: "NEXT.APPL"
    }

    attributes: "NO.BREADCRUMBS"
}