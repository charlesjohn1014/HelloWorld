Enquiry "CUSTOMER.POSITION.SCV" for "name:/ST_Customer:CUSTOMER.POSITION#" {
    metamodelVersion: "1.30.6"
    header {
        label {
            en = "A/Off  :"
        }

        column: 1
        line: 2
    }

    full-description {
        en =
        "Enquiry to display the transaction detailsof a particular customer.Information is selected from thefileCUSTOMER.POSITION which is built when the enquiryis run.The file CUS.POS.ENQ.PARAM determines the sortorder together with the CATEGORY code, and alsothe NARRATIVE to be used for display.Narrativesare defined in STMT.NARR.FORMAT"
    }

    description {
        en = "Client Details"
    }

    zero-records-display: true
    no-selection: true
    start-line: 4
    end-line: 99
    build-routines {
        jBC: "E.BUILD.CUS.POSITION"
    }

    fixed-selection "LIMIT.LEVEL" {
        Equals "PRODUCT", "NULL"
    }

    fixed-selection "EB.SYSTEM.ID" {
        NotEquals "LIUT", "FX", "SCS", "SCB"
    }

    fixed-selection "EB.SYSTEM.ID" {
        NotEquals "LIAL"
    }

    fixed-selection "DEAL.AMOUNT" {
        NotEquals "NULL"
    }

    fixed-sort: "CUSTOMER" Null
    fixed-sort: "SORT.POSITION" Null
    fixed-sort: "MATURITY.DATE" Null
    fixed-sort: "TRANS.REF" Null
    custom-selection {

        field "CUSTOMER.NO" {
            mandatory: true
            label {
                en = "Customer Number"
            }

            operands: Equals
        }

        AND

        field "INCL.JOINT.INFO" {
            label {
                en = "Include Joint Info?"
            }

        }

        AND

        field "CATEGORY" {
            label {
                en = "Product"
            }

        }

        AND

        field "SORT.POSITION" {
            label {
                en = "Sort Position"
            }

        }

        AND

        field "AC.NO.DAYS" {
            label {
                en = "Ac.No.Days"
            }

            operands: Equals
        }

        AND

        field "EB.SYSTEM.ID" {
            label {
                en = "System id"
            }

        }

        AND

        field "ASSET.LIAB.MARKER" {
            label {
                en = "AL Marker"
            }

        }

        None
    }

    field "ASTERIX" {
        break-condition {
            break: Once
        }

        comma-separator: false
        operation: constant "\"*\""
    }

    field "F" {
        break-condition {
            break: Once
        }

        comma-separator: false
        operation: constant "\"F\""
    }

    field "HEADER" {
        display-type: "CLASS-ENQ.H.TITLE"
        comma-separator: false
        display-section: Header
        position {
            column: 1
            line: 0
        }

        operation: constant "\"Client Details\""
    }

    field "HEADER2" {
        display-type: "CLASS-ENQ.H.DATA.LABEL"
        comma-separator: false
        display-section: Header
        position {
            column: 1
            line: 1
        }

        operation: constant "\"Client\""
    }

    field "HEADER3" {
        display-type: "CLASS-ENQ.H.DATA.LABEL"
        comma-separator: false
        display-section: Header
        position {
            column: 1
            line: 2
        }

        operation: constant "\"A/Off :\""
    }

    field "ENQUIRY.NAME" {
        break-condition {
            break: Once
        }

        comma-separator: false
        operation: constant "\"CUS.POSITION\""
    }

    field "TODAY" {
        break-condition {
            break: Once
        }

        comma-separator: false
        operation: today
    }

    field "LOCAL.CCY" {
        break-condition {
            break: Once
        }

        length: 3
        alignment: Left
        comma-separator: false
        processing-mode: Single
        operation: local-currency
    }

    field "PERC" {
        break-condition {
            break: Once
        }

        comma-separator: false
        operation: constant "\"PERC\""
    }

    field "CPE.TYPE" {
        comments: "Defines the enquiry type used to li nk to CUS.POS.ENQ.PARAM"
        format: User break-condition {
            break: Once
        }

        length: 10
        alignment: Left
        comma-separator: false
        processing-mode: Single
        operation: constant "\"\""
    }

    field "DETAIL.NEXT.LEVEL" {
        comments: "Denotes that the drilldown should b e to the detail (i.e transasction l evel from this enquiry)"
        format: User break-condition {
            break: Once
        }

        length: 1
        alignment: Left
        comma-separator: false
        processing-mode: Single
        operation: constant "\"Y\""
    }

    field "STAR" {
        comments: "be to the detail (i.e transasction level from this enquiry)" break-condition {
            break: Once
        }

        comma-separator: false
        operation: constant "\"*\""
    }

    field "NULL" {
        break-condition {
            break: Once
        }

        comma-separator: false
        operation: constant "\"\""
    }

    field "MINUS1" {
        comments: "to link to CUS.POS.ENQ.PARAM" break-condition {
            break: Once
        }

        comma-separator: false
        operation: constant "\"-1\""
    }

    field "CUSTOMER" {
        comments: "Customer number be to the detail (i .e transasction level from this enq uiry)"
        length: 60
        alignment: Left
        comma-separator: false
        processing-mode: Single
        operation: application-field-name "@ID"
        conversion: extract from 2 to 0 delimited by "*"
    }

    field "CPEP.RECORD" {
        length: 50
        alignment: Left
        comma-separator: false
        processing-mode: Single
        operation: application-field-name "@ID"
        conversion: call
        jBC: "@ E.GET.CPEP.RECORD"
    }

    field "AMT.TO.TAKE" {
        comments: "Indicates amount to be used for dis play"
        comma-separator: false
        operation: field-extract "CPEP.RECORD"
        conversion: extract from 4 to 0 delimited by ">"
    }

    field "AL.TYPE" {
        comments: "Asset or Liab indicator display"
        comma-separator: false
        operation: field-extract "CPEP.RECORD"
        conversion: extract from 6 to 0 delimited by ">"
    }

    field "BRKCUS" {
        comma-separator: false
        position {
            page-throw: true
        }

        operation: break-change "CUSTOMER"
    }

    field "DISP.CUST" {
        label {
            en = "Client"
        }

        display-type: "CLASS-ENQ.H.ID" break-condition {
            break: NewPage
        }

        length: 75
        alignment: Left
        comma-separator: false
        display-section: Header
        position {
            column: 10
            line: 1
        }

        processing-mode: Single
        operation: application-field-name "@ID"
        conversion: extract from 2 to 1 delimited by "*"
    }

    field "CUSTOMER.NAME" {
        comments: "display"
        display-type: "CLASS-ENQ.H.ID"
        format: User break-condition {
            break: NewPage
        }

        length: 35
        alignment: Left
        comma-separator: false
        display-section: Header
        position {
            column: 20
            line: 1
        }

        operation: field-extract "DISP.CUST"
        conversion: getFrom "CUSTOMER" "SHORT.NAME" false
    }

    field "ACCT.OFFICER" {
        label {
            en = "A/Off :"
        }

        display-type: "CLASS-ENQ.H.ID" break-condition {
            break: NewPage
        }

        comma-separator: false
        display-section: Header
        position {
            column: 10
            line: 2
        }

        processing-mode: Single
        operation: field-extract "CUSTOMER"
        conversion: getFrom "CUSTOMER" "ACCOUNT.OFFICER" false
    }

    field "ACCT.OFFICER.NAME" {
        display-type: "CLASS-ENQ.H.DATA" break-condition {
            break: NewPage
        }

        length: 35
        alignment: Left
        comma-separator: false
        display-section: Header
        position {
            column: 20
            line: 2
        }

        operation: field-extract "ACCT.OFFICER"
        conversion: getFrom "DEPT.ACCT.OFFICER" "NAME" false
    }

    field "CONVERT.RECORD" {
        comments: "Convert amounts to local"
        comma-separator: false
        operation: field-extract "LOCAL.CCY"
        conversion: call
        jBC: "@ E.CUS.POSITION.EXCHANGE"
    }

    field "EB.SYSTEM.ID" {
        length: 75
        alignment: Left
        comma-separator: false
        processing-mode: Single
        operation: application-field-name "ID"
        conversion: extract from 3 to 1 delimited by "*"
    }

    field "MODULE" {
        label {
            en = "Module"
        }

        length: 2
        alignment: Left
        comma-separator: false
        position {
            column: 1
        }

        processing-mode: Single
        operation: field-extract "EB.SYSTEM.ID"
        conversion: extract from 1 to 2
    }

    field "TXN.REF" {
        label {
            en = "Transaction Ref"
        }

        length: 75
        alignment: Left
        comma-separator: false
        position {
            column: 2
        }

        processing-mode: Single
        operation: application-field-name "ID"
        conversion: extract from 6 to 1 delimited by "*"
    }

    field "CUP.ID" {
        length: 75
        alignment: Left
        comma-separator: false
        processing-mode: Single
        operation: application-field-name "@ID"
    }

    field "NARRATIVE" {
        comments:
        "This should not be displayed direct ly, but should extracted from the f ield DISPLAY.NARR... to ensure mult i vlaues are preserved"
        length: 30
        alignment: Left
        comma-separator: false
        processing-mode: Multi
        operation: field-extract "CPEP.RECORD"
        conversion: extract from 3 to 1 delimited by ">"
        conversion: call
        jBC: "@ E.CUS.NARRATIVE"
    }

    field "DISPLAY.NARRATIVE" {
        label {
            en = "Display Narrative"
        }

        format: User
        length: 30
        alignment: Left
        comma-separator: false
        position {
            column: 3
        }

        processing-mode: Multi
        operation: application-field-name "DISPLAY.NARRATIVE"
    }

    field "NEXT.ENQ" {
        comments:
        "Returns the next enquiry and select ion separted by a > from the fie ld DISPLAY.NARR... to ensure multi vlaues are preserved"
        comma-separator: false
        processing-mode: Single
        operation: field-extract "CUP.ID"
        conversion: call
        jBC: "@ E.CUS.POS.NEXT.LEVEL"
    }

    field "DEAL.CCY" {
        label {
            en = "Deal Ccy"
        }

        length: 3
        alignment: Left
        comma-separator: false
        position {
            column: 4
        }

        processing-mode: Single
        operation: application-field-name "DEAL.CCY"
    }

    field "PERC.AMOUNT" {
        comments: "selection separted by a >"
        length: 19
        alignment: Right
        comma-separator: false
        processing-mode: Single
        operation: application-field-name "PERC.AMOUNT"
    }

    field "DEAL.AMOUNT" {
        comments:
        "directly, but should extracted fro m the field DISPLAY.NARR... to ensu re multi vlaues are preserved"
        length: 19
        alignment: Right
        comma-separator: false
        processing-mode: Single
        operation: application-field-name "DEAL.AMOUNT"
    }

    field "DEAL.USE.AMT" {
        comma-separator: false
        operation: if "AMT.TO.TAKE" Equals "PERC" process "PERC.AMOUNT" "DEAL.AMOUNT"
    }

    field "DEAL.USE.AMT.OPP" {
        comments: "selection separted by a >"
        comma-separator: false
        operation: calc "DEAL.USE.AMT" * "MINUS1"
    }

    field "A.L" {
        length: 6
        alignment: Left
        comma-separator: false
        processing-mode: Single
        operation: application-field-name "ASSET.LIAB.MARKER"
    }

    field "AL.2" {
        comma-separator: false
        operation: field-extract "A.L"
    }

    field "USE.AL" {
        comma-separator: false
        processing-mode: Single
        operation: if "AL.TYPE" NotEquals "NULL" process "AL.TYPE" "AL.2"
    }

    field "DISP.AMT" {
        label {
            en = "Amount"
        }

        display-type: "CLASS-POSNEG"
        format: Currency "DEAL.CCY" negative-pattern -#
        length: 20
        alignment: Right
        comma-separator: true
        position {
            column: 5
        }

        operation: if "USE.AL" Equals "A.L" process "DEAL.USE.AMT" "DEAL.USE.AMT.OPP"
    }

    field "MARGIN.PERC" {
        format: Rate
        length: 75
        alignment: Left
        comma-separator: false
        processing-mode: Single
        operation: application-field-name "@ID"
        conversion: call
        jBC: "@ E.GET.MARGIN.PERC.VALUE"
    }

    field "MARGIN.NARR" {
        comma-separator: false
        operation: if "MARGIN.PERC" NotEquals "NULL" process "STAR" "NULL"
    }

    field "VALUE.DATE" {
        length: 8
        alignment: Right
        comma-separator: false
        processing-mode: Single
        operation: application-field-name "VALUE.DATE"
    }

    field "MARGIN.DISP" {
        label {
            en = "Margin Display"
        }

        display-type: "CLASS-POSNEG"
        format: Currency "DEAL.CCY" negative-pattern -#
        length: 20
        alignment: Right
        comma-separator: true
        position {
            column: 6
        }

        operation: if "AMT.TO.TAKE" Equals "PERC" process "MARGIN.NARR" "NULL"
    }

    field "FORWARD.IND" {
        label {
            en = "Forward Date"
        }

        format: Date
        length: 12
        alignment: Right
        comma-separator: false
        position {
            column: 7
        }

        operation: if "VALUE.DATE" Greater "TODAY" process "F" "NULL"
    }

    field "COLL.RGHT.COVER" {
        label {
            en = "Coll Right Cover"
        }

        length: 15
        alignment: Left
        comma-separator: false
        position {
            column: 8
        }

        processing-mode: Multi
        operation: application-field-name "COLL.RGHT.COVER"
    }

    field "NULL.02" {
        comma-separator: false
        operation: constant "\" \""
    }

    field "NULL1" {
        comma-separator: false
        operation: constant "\"NONE\""
    }

    field "COLL.RIGHT.COVER.1" {
        label {
            en = "Coll Right Cover"
        }

        comma-separator: false
        operation: if "COLL.RGHT.COVER" Equals "NULL" process "NULL1" "COLL.RGHT.COVER"
    }

    field "COLL.RIGHT" {
        label {
            en = "Coll Right"
        }

        length: 15
        alignment: Left
        comma-separator: false
        position {
            column: 9
        }

        processing-mode: Multi
        operation: application-field-name "COLL.RIGHT"
    }

    field "LOCAL.AMOUNT" {
        comments: "The local equivalent for the compar ison and totals"
        comma-separator: false
        operation: field-extract "CONVERT.RECORD"
        conversion: extract from 1 to 1 delimited by ">"
    }

    field "LOCAL.PERC.AMOUNT" {
        comments: "The local equivalent of a percentag"
        comma-separator: false
        operation: field-extract "CONVERT.RECORD"
        conversion: extract from 2 to 1 delimited by ">"
    }

    field "LOC.AMT.USE" {
        comments: "comparison and totals"
        comma-separator: false
        operation: if "AMT.TO.TAKE" Equals "PERC" process "LOCAL.PERC.AMOUNT" "LOCAL.AMOUNT"
    }

    field "LOC.AMT.USE.OPP" {
        comments: "comparison and totals"
        comma-separator: false
        operation: calc "LOC.AMT.USE" * "MINUS1"
    }

    field "DISP.LOC.AMT.USE" {
        comma-separator: false
        operation: if "USE.AL" Equals "A.L" process "LOC.AMT.USE" "LOC.AMT.USE.OPP"
    }

    field "LIAL" {
        comments: "comparison and totals"
        comma-separator: false
        operation: constant "\"LIAL\""
    }

    field "ZERO" {
        comma-separator: false
        operation: constant "\"0\""
    }

    field "NON.LIMITS" {
        comma-separator: false
        operation: if "EB.SYSTEM.ID" Equals "LIAL" process "ZERO" "DISP.LOC.AMT.USE"
    }

    field "TOTAL.NON.LIMITS" {
        break-condition {
            field: "BRKCUS"
        }

        comma-separator: false
        operation: total "NON.LIMITS"
    }

    field "LIMITS" {
        comma-separator: false
        operation: if "EB.SYSTEM.ID" Equals "LIAL" process "DISP.LOC.AMT.USE" "ZERO"
    }

    field "TOT.LIMITS" {
        break-condition {
            field: "BRKCUS"
        }

        comma-separator: false
        operation: total "LIMITS"
    }

    field "CAP.LIMIT" {
        break-condition {
            field: "BRKCUS"
        }

        comma-separator: false
        operation: selection "CUSTOMER.NO"
        conversion: call
        jBC: "@ E.CAP.LIMIT.AMOUNT"
    }

    field "MAX.LIMITS" {
        break-condition {
            field: "BRKCUS"
        }

        comma-separator: false
        operation: if "TOT.LIMITS" Greater "CAP.LIMIT" process "CAP.LIMIT" "TOT.LIMITS"
    }

    field "TOTAL.NARR" {
        display-type: "CLASS-ENQ.H.DATA" break-condition {
            field: "BRKCUS"
        }

        comma-separator: false
        escapeSequence: RV
        position {
            column: 3
            line: + 1
        }

        operation: constant "\"Total Value In Local Ccy :\""
    }

    field "TOTAL.LOCAL" {
        label {
            en = "Total Value In Local Ccy :"
        }

        display-type: "CLASS-POSNEG"
        format: Currency "LOCAL.CCY" negative-pattern -# break-condition {
            field: "BRKCUS"
        }

        length: 20
        alignment: Right
        comma-separator: true
        position {
            column: 5
            line: + 1
        }

        processing-mode: Single
        operation: calc "TOTAL.NON.LIMITS" + "MAX.LIMITS"
    }

    field "NENQ" {
        comma-separator: false
        operation: field-extract "NEXT.ENQ"
        conversion: extract from 1 to 1 delimited by ">"
    }

    field "NEXT.SEL1" {
        comma-separator: false
        operation: field-extract "NEXT.ENQ"
        conversion: extract from 2 to 1 delimited by ">"
    }

    field "NEXT.SEL2" {
        comma-separator: false
        operation: field-extract "NEXT.ENQ"
        conversion: extract from 3 to 1 delimited by ">"
    }

    field "COSNAME1" {
        comma-separator: false
        operation: constant "\"ARC.\""
    }

    field "COSNAME2" {
        comma-separator: false
        operation: calc "COSNAME1":"MODULE"
    }

    field "COSNAME3" {
        comma-separator: false
        operation: constant "\"COS\""
    }

    field "COSNAME4" {
        comma-separator: false
        operation: calc "COSNAME3":"COSNAME2"
    }

    field "SPACE" {
        comma-separator: false
        operation: constant "\" \""
    }

    field "SPACE.TXN.REF" {
        comma-separator: false
        operation: calc "SPACE":"TXN.REF"
    }

    field "COSNAME5" {
        comma-separator: false
        operation: calc "COSNAME4":"SPACE.TXN.REF"
    }

    field "TMP.1" {
        comma-separator: false
        operation: field-extract "TXN.REF"
        conversion: getFrom "ACCOUNT" "CATEGORY" false
    }

    field "TMP.2" {
        comma-separator: false
        operation: constant "\"3100 3200\""
    }

    field "TMP.3" {
        comma-separator: false
        operation: constant "\"6600 6800\""
    }

    field "AA.MOD" {
        comma-separator: false
        operation: constant "\"AA\""
    }

    field "TMP.4" {
        comma-separator: false
        operation: if "TMP.1" Between "TMP.2" process "AA.MOD" "MODULE"
    }

    field "TMP.5" {
        comma-separator: false
        operation: if "TMP.1" Between "TMP.3" process "AA.MOD" "MODULE"
    }

    field "TMP.6" {
        comma-separator: false
        operation: if "TMP.4" Equals "NULL" process "TMP.5" "TMP.4"
    }

    field "TMP.7" {
        comma-separator: false
        operation: calc "NENQ":"SPACE"
    }

    field "TMP.8" {
        comma-separator: false
        operation: calc "TMP.7":"NEXT.SEL1"
    }

    field "TMP.9" {
        comma-separator: false
        operation: calc "TMP.8":"SPACE"
    }

    field "TMP.10" {
        comma-separator: false
        operation: calc "TMP.9":"NEXT.SEL2"
    }

    field "NEXT.DD" {
        comma-separator: false
        operation: field-extract "TMP.6"
        conversion: replace {
            oldData: "AC"
            newData: "COS SCV.ARC.AC"
        }

        conversion: replace {
            oldData: "AA"
            newData: "AA"
        }

        conversion: replace {
            oldData: "LD"
            newData: "COS SCV.ARC.LD"
        }

        conversion: replace {
            oldData: "SC"
            newData: "COS SCV.ARC.SC"
        }

        conversion: replace {
            oldData: "CO"
            newData: "COLLATERAL S"
        }

        conversion: replace {
            oldData: "FX"
            newData: "FOREX S"
        }

        conversion: replace {
            oldData: "MM"
            newData: "MM.MONEY.MARKET S"
        }

        conversion: replace {
            oldData: "FD"
            newData: "FD.FID.ORDER S"
        }

        conversion: replace {
            oldData: "LI"
            newData: "LIMIT S"
        }

        conversion: replace {
            oldData: "LC"
            newData: "LETTER.OF.CREDIT S"
        }

        conversion: replace {
            oldData: "PD"
            newData: "COS SCV.PD.OUTSTANDINGS.REPORT"
        }

        conversion: replace {
            oldData: "MG"
            newData: "MORTGAGE S"
        }

        conversion: replace {
            oldData: "MD"
            newData: "MD.DEAL S"
        }

        conversion: replace {
            oldData: "DX"
            newData: "DX.TRANSACTION S"
        }

        conversion: replace {
            oldData: "SY"
            newData: "SY.TRANSACTION S"
        }

    }

    field "TMP.11" {
        comma-separator: false
        operation: if "NEXT.DD" Equals "AA" process "TMP.10" "NEXT.DD"
    }

    field "TF.TXN.REF" {
        comma-separator: false
        operation: field-extract "TXN.REF"
        conversion: extract from 1 to 12
    }

    field "TMP.12" {
        comma-separator: false
        operation: if "TMP.6" Equals "LC" process "TF.TXN.REF" "TXN.REF"
    }

    field "DXPART.ID" {
        comma-separator: false
        operation: field-extract "EB.SYSTEM.ID"
        conversion: extract from 1 to 5
    }

    field "DXTRA.STR" {
        comma-separator: false
        operation: constant "\"DXTRA\""
    }

    field "DX.STR" {
        comma-separator: false
        operation: constant "\"DX\""
    }

    field "DX.ID" {
        comma-separator: false
        operation: if "DXPART.ID" Equals "DXTRA.STR" process "DXTRA.REF" "TMP.12"
    }

    field "DXTRA.REF" {
        comma-separator: false
        operation: field-extract "TMP.12"
        conversion: extract from 1 to 1 delimited by "."
    }

    field "NEXT.DX" {
        comma-separator: false
        operation: field-extract "DXPART.ID"
        conversion: replace {
            oldData: "DXTRA"
            newData: "DX.TRADE S"
        }

        conversion: replace {
            oldData: "DX"
            newData: "DX.TRANSACION S"
        }

    }

    field "NEXT.DD.1" {
        comma-separator: false
        operation: calc "TMP.11":"SPACE"
    }

    field "NEXT.DD.2" {
        comma-separator: false
        operation: calc "NEXT.DD.1":"TMP.12"
    }

    field "NEXT.DX.1" {
        comma-separator: false
        operation: calc "NEXT.DX":"SPACE"
    }

    field "NEXT.DX.2" {
        comma-separator: false
        operation: calc "NEXT.DX.1":"DXTRA.REF"
    }

    field "NEXT.ENQ.LEV" {
        comma-separator: false
        operation: if "TMP.11" Equals "DX.STR" process "NEXT.DX.2" "NEXT.DD.2"
    }

    field "FINAL.DRILL" {
        comma-separator: false
        operation: if "NEXT.DD" Equals "AA.MOD" process "NENQ" "NEXT.ENQ.LEV"
    }

    field "FINAL.SEL1" {
        comma-separator: false
        operation: if "NEXT.DD" Equals "AA.MOD" process "NEXT.SEL1" "NULL"
    }

    field "FINAL.SEL2" {
        comma-separator: false
        operation: if "NEXT.DD" Equals "AA.MOD" process "NEXT.SEL2" "NULL"
    }

    field "ZERORECORDS" {
        display-type: "CLASS-ENQ.NORECS" break-condition {
            break: None
        }

        comma-separator: false
        position {
            column: 1
        }

        operation: constant "\"No Positions for this Customer\""
    }

    field "NULL.03" {
        comma-separator: false
        operation: constant "\"XXX\""
    }

    field "DRILL.COLL.RIGHT" {
        comma-separator: false
        operation: if "COLL.RIGHT" Equals "NULL" process "DUMM.VAL" "COLL.RIGHT"
    }

    drilldown "1" {
        description {
            en = "Details"
        }

        label-field: "TXN.REF"
        image: "view.gif"
        criteria: "FINAL.SEL1"
        criteria: "FINAL.SEL2"
        from-field: "FINAL.DRILL"
    }

}