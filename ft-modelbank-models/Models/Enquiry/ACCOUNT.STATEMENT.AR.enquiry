Enquiry "ACCOUNT.STATEMENT.AR" for "name:/AC_EntryCreation:STMT.ENTRY#" {
    metamodelVersion: "1.30.6" full-description {
        en = "Account Statement"
    }

    description {
        en = "Account Statement"
    }

    account-field: "ACCOUNT.NUMBER"
    customer-field: "CUST.NO"
    no-selection: true
    start-line: 4
    end-line: 19
    build-routines {
        jBC: "E.STMT.ENT.BUILD"
    }

    fixed-selection "MASK.PRINT" {
        Equals "\'\'"
    }

    fixed-sort: "DATE.TIME" Null
    custom-selection {

        field "STATEMENT.ID" {
            label {
                en = "Account Number"
            }

        }

        None
    }

    field "INITIAL.DATA" {
        comments: "Handoff and address record" break-condition {
            break: Once
        }

        alignment: Left
        comma-separator: false
        processing-mode: Single
        operation: application-field-name "@ID"
        conversion: call
        jBC: "@ E.ACCOUNT.STATEMENT"
    }

    field "@ID" {
        length: 90
        alignment: Left
        comma-separator: false
        processing-mode: Single
        operation: application-field-name "@ID"
    }

    field "HDR1" {
        display-type: "CLASS-ENQ.ID.LABEL"
        alignment: Left
        comma-separator: false
        display-section: Header
        operation: constant "\"Account Number :\""
    }

    field "HDR2" {
        display-type: "CLASS-ENQ.H.DATA.LABEL"
        alignment: Left
        comma-separator: false
        display-section: Header
        operation: constant "\"Account Type :\""
    }

    field "HDR3" {
        display-type: "CLASS-ENQ.H.DATA.LABEL"
        alignment: Left
        comma-separator: false
        display-section: Header
        operation: constant "\"Currency :\""
    }

    field "HDR4" {
        display-type: "CLASS-ENQ.H.DATA.LABEL"
        alignment: Left
        comma-separator: false
        display-section: Header
        position {
            column: 15
            line: 1
        }

        operation: constant "\"Non-Beneficial Customers :\""
    }

    field "HDR5" {
        display-type: "CLASS-ENQ.H.DATA.LABEL"
        alignment: Left
        comma-separator: false
        display-section: Header
        position {
            column: 15
            line: 3
        }

        operation: constant "\"Statement Date :\""
    }

    field "HDR6" {
        display-type: "CLASS-ENQ.H.DATA.LABEL"
        alignment: Left
        comma-separator: false
        display-section: Header
        operation: constant "\"Page :\""
    }

    field "HDR7" {
        display-type: "CLASS-ENQ.H.DATA.LABEL"
        alignment: Left
        comma-separator: false
        display-section: Header
        position {
            column: 1
            line: 1
        }

        operation: constant "\"Beneficial Customers :\""
    }

    field "HDR.SPACE" {
        alignment: Left
        comma-separator: false
        display-section: Header
        position {
            column: 1
            line: 9
        }

        hidden: true
        operation: constant "\" \""
    }

    field "HDR.FROM.DATE" {
        display-type: "CLASS-ENQ.H.DATA.LABEL"
        alignment: Left
        comma-separator: false
        display-section: Header
        position {
            column: 1
            line: 2
        }

        operation: constant "\"From Date :\""
    }

    field "HDR.SPACE1" {
        alignment: Left
        comma-separator: false
        display-section: Header
        position {
            column: 1
            line: 10
        }

        hidden: true
        operation: constant "\" \""
    }

    field "HDR.TO.DATE" {
        display-type: "CLASS-ENQ.H.DATA.LABEL"
        alignment: Left
        comma-separator: false
        display-section: Header
        position {
            column: 15
            line: 2
        }

        operation: constant "\"To Date :\""
    }

    field "HDR.SPACE2" {
        alignment: Left
        comma-separator: false
        display-section: Header
        position {
            column: 1
            line: 12
        }

        operation: constant "\" \""
    }

    field "HDR8" {
        display-type: "CLASS-ENQ.H.DATA.LABEL"
        alignment: Left
        comma-separator: false
        display-section: Header
        position {
            column: 1
            line: 3
        }

        operation: constant "\"Brought Forward\""
    }

    field "ACCOUNT.NUMBER" {
        length: 16
        alignment: Left
        comma-separator: false
        processing-mode: Single
        operation: application-field-name "ACCOUNT.NUMBER"
    }

    field "HANDOFF.RECORD" {
        comments: "The AC.STMT.HANDOFF record. Fields are delimited by \"~\"" break-condition {
            break: Once
        }

        alignment: Left
        comma-separator: false
        operation: field-extract "INITIAL.DATA"
        conversion: extract from 2 to 1 delimited by ">"
    }

    field "OPENING.BALANCE" {
        comments: "The opening balance of the statemen t, from the handoff record" break-condition {
            break: Once
        }

        alignment: Left
        comma-separator: false
        operation: field-extract "HANDOFF.RECORD"
        conversion: extract from 13 to 0 delimited by "~"
    }

    field "ADDRESS.RECORD" {
        comments: "The DE.ADDRESS record. fields are d elimited by \"~\"." break-condition {
            break: Once
        }

        alignment: Left
        comma-separator: false
        operation: field-extract "INITIAL.DATA"
        conversion: extract from 1 to 1 delimited by ">"
    }

    field "LOCAL.CCY" {
        comments: "Holds the local currency code"
        format: User break-condition {
            break: Once
        }

        alignment: Left
        comma-separator: false
        operation: local-currency
    }

    field "NULL" {
        comments: "Null - used for comparison" break-condition {
            break: Once
        }

        alignment: Left
        comma-separator: false
        operation: constant "\"\""
    }

    field "ONE" {
        comments: "Used for incrementing the page" break-condition {
            break: Once
        }

        alignment: Left
        comma-separator: false
        operation: constant "\"1\""
    }

    field "ZERO" {
        comments: "Zero - used for comparison" break-condition {
            break: Once
        }

        alignment: Left
        comma-separator: false
        operation: constant "\"0\""
    }

    field "PAGE.NUMBER" {
        comments: "Current page number" break-condition {
            break: Page
        }

        alignment: Left
        comma-separator: false
        operation: calc "PAGE.NUMBER" + "ONE"
    }

    field "ENTRY.CCY" {
        comments: "The account/entry currency."
        alignment: Left
        comma-separator: false
        operation: field-extract "HANDOFF.RECORD"
        conversion: extract from 8 to 0 delimited by "~"
    }

    field "FOREIGN.AMT" {
        comments: "Entry amount in foreign ccy"
        alignment: Left
        comma-separator: false
        processing-mode: Single
        operation: application-field-name "AMOUNT.FCY"
    }

    field "LOCAL.AMT" {
        comments: "Entry amount in local ccy"
        alignment: Left
        comma-separator: false
        processing-mode: Single
        operation: application-field-name "AMOUNT.LCY"
    }

    field "ENTRY.AMOUNT" {
        comments: "The amount of the entry."
        alignment: Left
        comma-separator: false
        operation: if "ENTRY.CCY" Equals "LOCAL.CCY" process "LOCAL.AMT" "FOREIGN.AMT"
    }

    field "ENTRY.SIGN" {
        comments: "Entry sign based on reversal marker and ACCOUNT.PARAMETER setup"
        alignment: Left
        comma-separator: false
        operation: field-extract "ENTRY.AMOUNT"
        conversion: call
        jBC: "@ E.GET.ENTRY.SIGN"
    }

    field "CREDIT.AMOUNT" {
        comments: "Entry amount if credit or reversal of credit(based on setup)"
        alignment: Left
        comma-separator: false
        operation: if "ENTRY.SIGN" Equals "\"CREDIT\"" process "ENTRY.AMOUNT" "NULL"
    }

    field "DEBIT.AMOUNT" {
        comments: "Entry amount if debit or reversal o f debit(based on setup)"
        alignment: Left
        comma-separator: false
        display-section: Header
        operation: if "ENTRY.SIGN" Equals "\"DEBIT\"" process "ENTRY.AMOUNT" "NULL"
    }

    field "TOTAL.ENTRY.AMOUNT" {
        comments: "Total of all entries processed"
        alignment: Left
        comma-separator: false
        operation: total "ENTRY.AMOUNT"
    }

    field "PAGE.BROUGHT.FWD" {
        comments: "Balance brought forward. Should be used as the brought forward for eac h new page." break-condition
        {
            break: Page
        }

        alignment: Left
        comma-separator: false
        operation: calc "TOTAL.ENTRY.AMOUNT" + "OPENING.BALANCE"
    }

    field "ENTRY.ACCUMULATOR" {
        comments: "Running total of all entries"
        alignment: Left
        comma-separator: false
        operation: calc "ENTRY.ACCUMULATOR" + "ENTRY.AMOUNT"
    }

    field "RUNNING.BALANCE" {
        comments: "Running account balance * DO NOT MO DIFY THE ABOVE FIELDS *"
        alignment: Left
        comma-separator: false
        operation: calc "OPENING.BALANCE" + "ENTRY.ACCUMULATOR"
    }

    field "AC.OPEN.DATE" {
        comments: "Account Opening Date"
        alignment: Left
        comma-separator: false
        display-section: Header
        operation: field-extract "ACCOUNT.NUMBER"
        conversion: getFrom "ACCOUNT" "OPENING.DATE" false
    }

    field "STMT.FRM.DAT" {
        alignment: Left
        comma-separator: false
        display-section: Header
        operation: field-extract "HANDOFF.RECORD"
        conversion: extract from 12 to 0 delimited by "~"
    }

    field "H.PAGE.NUMBER" {
        comments: "Page number"
        display-type: "CLASS-ENQ.H.DATA" break-condition {
            break: Page
        }

        length: 3
        alignment: Right
        comma-separator: false
        display-section: Header
        operation: field-extract "PAGE.NUMBER"
    }

    field "ACCOUNT.TITLE.1" {
        comments: "Account Title 1"
        display-type: "CLASS-ENQ.H.DATA" break-condition {
            break: Page
        }

        length: 35
        alignment: Left
        comma-separator: false
        display-section: Header
        operation: field-extract "ACCOUNT.NUMBER"
        conversion: getFrom "ACCOUNT" "ACCOUNT.TITLE.1" false
    }

    field "ACCOUNT.TITLE.2" {
        comments: "Account Title 2"
        display-type: "CLASS-ENQ.H.DATA" break-condition {
            break: Page
        }

        length: 35
        alignment: Left
        comma-separator: false
        display-section: Header
        operation: field-extract "ACCOUNT.NUMBER"
        conversion: getFrom "ACCOUNT" "ACCOUNT.TITLE.2" false
    }

    field "H.NAME1" {
        comments: "Customer name 1"
        display-type: "CLASS-ENQ.H.DATA" break-condition {
            break: Page
        }

        alignment: Left
        comma-separator: false
        display-section: Header
        operation: field-extract "ADDRESS.RECORD"
        conversion: extract from 7 to 0 delimited by "~"
    }

    field "H.NAME.2" {
        comments: "Customer name 2"
        display-type: "CLASS-ENQ.H.DATA" break-condition {
            break: Page
        }

        length: 30
        alignment: Left
        comma-separator: false
        display-section: Header
        operation: field-extract "ADDRESS.RECORD"
        conversion: extract from 8 to 0 delimited by "~"
    }

    field "H.STREET" {
        comments: "Customer address - street"
        display-type: "CLASS-ENQ.H.DATA" break-condition {
            break: Page
        }

        alignment: Left
        comma-separator: false
        display-section: Header
        operation: field-extract "ADDRESS.RECORD"
        conversion: extract from 9 to 0 delimited by "~"
    }

    field "H.TOWN" {
        comments: "Customer address - town"
        display-type: "CLASS-ENQ.H.DATA" break-condition {
            break: Page
        }

        length: 25
        alignment: Left
        comma-separator: false
        display-section: Header
        operation: field-extract "ADDRESS.RECORD"
        conversion: extract from 10 to 0 delimited by "~"
    }

    field "H.POST.CODE" {
        comments: "Customer Post Code"
        display-type: "CLASS-ENQ.H.DATA" break-condition {
            break: Page
        }

        length: 25
        alignment: Left
        comma-separator: false
        display-section: Header
        operation: field-extract "ADDRESS.RECORD"
        conversion: extract from 11 to 0 delimited by "~"
    }

    field "H.COUNTRY" {
        comments: "Customer Country"
        display-type: "CLASS-ENQ.H.DATA" break-condition {
            break: Page
        }

        length: 25
        alignment: Left
        comma-separator: false
        display-section: Header
        operation: field-extract "ADDRESS.RECORD"
        conversion: extract from 12 to 0 delimited by "~"
    }

    field "D.ACCOUNT.NUMBER" {
        comments: "Print account number on each page"
        display-type: "CLASS-ENQ.H.ID" break-condition {
            break: Page
        }

        length: 16
        alignment: Left
        comma-separator: false
        display-section: Header
        processing-mode: Single
        operation: field-extract "ACCOUNT.NUMBER"
    }

    field "ACCOUNT.TYPE" {
        display-type: "CLASS-ENQ.H.DATA"
        format: User break-condition {
            break: Page
        }

        length: 35
        alignment: Left
        comma-separator: false
        display-section: Header
        operation: field-extract "HANDOFF.RECORD"
        conversion: extract from 9 to 0 delimited by "~"
        conversion: getFrom "CATEGORY" "DESCRIPTION" false
    }

    field "ACCOUNT.CURRENCY" {
        display-type: "CLASS-ENQ.H.DATA"
        format: User break-condition {
            break: Page
        }

        length: 35
        alignment: Left
        comma-separator: false
        display-section: Header
        operation: field-extract "ENTRY.CCY"
        conversion: getFrom "CURRENCY" "CCY.NAME" false
    }

    field "TODAYS.DATE" {
        display-type: "CLASS-ENQ.H.DATA"
        format: Date break-condition {
            break: Page
        }

        length: 11
        alignment: Left
        comma-separator: false
        display-section: Header
        position {
            column: 20
            line: 3
        }

        operation: today
    }

    field "H.PAGE.NUMBER.02" {
        comments: "Page Number"
        display-type: "CLASS-ENQ.H.DATA" break-condition {
            break: Page
        }

        length: 3
        alignment: Left
        comma-separator: false
        display-section: Header
        operation: field-extract "PAGE.NUMBER"
    }

    field "ARR.ID" {
        alignment: Left
        comma-separator: false
        processing-mode: Single
        operation: field-extract "ACCOUNT.NUMBER"
        conversion: getFrom "ACCOUNT" "ARRANGEMENT.ID" false
    }

    field "NONE" {
        format: Translate
        alignment: Left
        comma-separator: false
        processing-mode: Single
        operation: constant "\" None \""
    }

    field "BEN.CUST" {
        alignment: Left
        comma-separator: false
        processing-mode: Single
        operation: field-extract "ARR.ID"
        conversion: call
        jBC: "@ E.AA.CONV.GET.BENEFICIAL.CUSTOMERS"
        conversion: call
        jBC: "@ E.MB.GET.CUSTOMER.NAME"
    }

    field "BENEFICIAL.CUSTOMERS" {
        display-type: "CLASS-ENQ.H.DATA"
        length: 35
        alignment: Left
        comma-separator: false
        display-section: Header
        position {
            column: 10
            line: 1
        }

        processing-mode: Single
        operation: if "BEN.CUST" Equals "\"\"" process "NONE" "BEN.CUST"
    }

    field "NON.BEN.CUST" {
        alignment: Left
        comma-separator: false
        processing-mode: Single
        operation: field-extract "ARR.ID"
        conversion: call
        jBC: "@ E.AA.CONV.GET.NONBENEFICIAL.CUST"
        conversion: call
        jBC: "@ E.MB.GET.CUSTOMER.NAME"
    }

    field "NON.BENEFICIAL.CUSTOMERS" {
        display-type: "CLASS-ENQ.H.DATA"
        length: 35
        alignment: Left
        comma-separator: false
        display-section: Header
        position {
            column: 20
            line: 1
        }

        processing-mode: Single
        operation: if "NON.BEN.CUST" Equals "\"\"" process "NONE" "NON.BEN.CUST"
    }

    field "STMT.FROM.DATE.1" {
        display-type: "CLASS-ENQ.H.DATA"
        format: Date
        alignment: Left
        comma-separator: false
        display-section: Header
        position {
            column: 10
            line: 2
        }

        operation: if "STMT.FRM.DAT" Equals "\"\"" process "\"\"" "STMT.FRM.DAT"
    }

    field "STMT.TO.DATE" {
        display-type: "CLASS-ENQ.H.DATA"
        format: Date
        alignment: Left
        comma-separator: false
        display-section: Header
        position {
            column: 20
            line: 2
        }

        operation: field-extract "HANDOFF.RECORD"
        conversion: extract from 20 to 0 delimited by "~"
    }

    field "ZERO.02" {
        alignment: Left
        comma-separator: false
        operation: constant "\"0\""
    }

    field "H.FORWARD" {
        display-type: "CLASS-ENQ.H.DATA"
        format: Currency "ENTRY.CCY" negative-pattern -# break-condition {
            break: Page
        }

        length: 19
        alignment: Right
        comma-separator: false
        display-section: Header
        position {
            column: 10
            line: 3
        }

        operation: field-extract "PAGE.BROUGHT.FWD"
    }

    field "BOOKING.DATE" {
        label {
            en = "Booking Date"
        }

        format: Date
        length: 11
        alignment: Left
        comma-separator: false
        position {
            column: 1
        }

        processing-mode: Single
        operation: application-field-name "BOOKING.DATE"
    }

    field "TRANS.REFERENCE" {
        label {
            en = "Reference"
        }

        length: 25
        alignment: Left
        comma-separator: false
        position {
            column: 13
        }

        processing-mode: Single
        operation: application-field-name "TRANS.REFERENCE"
    }

    field "TRANSACTION.CODE" {
        label {
            en = "Description"
        }

        length: 30
        alignment: Left
        comma-separator: false
        position {
            column: 38
        }

        processing-mode: Single
        operation: application-field-name "TRANSACTION.CODE"
        conversion: getFrom "TRANSACTION" "NARRATIVE" false
    }

    field "DESC" {
        length: 90
        alignment: Left
        comma-separator: false
        processing-mode: Single
        operation: field-extract "@ID"
        conversion: call
        jBC: "@ E.GET.NARRATIVE"
        conversion: call
        jBC: "@ E.GET.SPECIAL.NARR"
    }

    field "VALID.DESC" {
        alignment: Left
        comma-separator: false
        operation: if "DESC" Equals "@ID" process "NULL" "DESC"
    }

    field "THEIR REF" {
        length: 30
        alignment: Left
        comma-separator: false
        processing-mode: Single
        operation: application-field-name "THEIR.REFERENCE"
    }

    field "NARRATIVE" {
        length: 34
        alignment: Left
        comma-separator: false
        position {
            column: 38
            line: + 1
        }

        processing-mode: Multi
        operation: application-field-name "NARRATIVE"
    }

    field "VALUE.DATE" {
        label {
            en = "Value Date"
        }

        format: Date
        length: 11
        alignment: Right
        comma-separator: false
        position {
            column: 72
        }

        processing-mode: Single
        operation: application-field-name "VALUE.DATE"
    }

    field "ABS.DEBIT.AMT" {
        format: Currency "ENTRY.CCY" negative-pattern -#
        alignment: Left
        comma-separator: false
        operation: field-extract "DEBIT.AMOUNT"
        conversion: abs
    }

    field "D.AMOUNT" {
        label {
            en = "Debit"
        }

        length: 19
        alignment: Right
        comma-separator: false
        position {
            column: 83
        }

        operation: if "ABS.DEBIT.AMT" Greater "ZERO" process "ABS.DEBIT.AMT" "NULL"
    }

    field "TOTAL.D.AMOUNT" {
        alignment: Left
        comma-separator: false
        operation: total "DEBIT.AMOUNT"
    }

    field "C.AMOUNT" {
        label {
            en = "Credit"
        }

        format: Currency "ENTRY.CCY" negative-pattern -#
        length: 19
        alignment: Right
        comma-separator: false
        position {
            column: 102
        }

        operation: field-extract "CREDIT.AMOUNT"
    }

    field "TOTAL.C.AMOUNT" {
        alignment: Left
        comma-separator: false
        operation: total "C.AMOUNT"
    }

    field "R.BALANCE" {
        label {
            en = "Closing Balance"
        }

        comments: "Running balance"
        format: Currency "ENTRY.CCY" negative-pattern -#
        length: 19
        alignment: Right
        comma-separator: true
        position {
            column: 121
        }

        operation: field-extract "RUNNING.BALANCE"
    }

    field "FINAL.PAID.IN.TXT" {
        break-condition {
            break: End
        }

        alignment: Left
        comma-separator: false
        display-section: Footer
        position {
            column: 47
            line: + 2
        }

        processing-mode: Single
        operation: constant "\"Total Debits :\""
    }

    field "D.TOTAL.D.AMOUNT" {
        format: Currency "ENTRY.CCY" negative-pattern -# break-condition {
            break: End
        }

        length: 19
        alignment: Right
        comma-separator: true
        display-section: Footer
        position {
            column: 67
            line: + 2
        }

        processing-mode: Single
        operation: field-extract "TOTAL.D.AMOUNT"
    }

    field "FINAL.PAID.OUT.TXT" {
        break-condition {
            break: End
        }

        alignment: Left
        comma-separator: false
        display-section: Footer
        position {
            column: 47
            line: + 3
        }

        processing-mode: Single
        operation: constant "\"Total Credits :\""
    }

    field "D.TOTAL.C.AMOUNT" {
        format: Currency "ENTRY.CCY" negative-pattern -# break-condition {
            break: End
        }

        length: 19
        alignment: Right
        comma-separator: true
        display-section: Footer
        position {
            column: 67
            line: + 3
        }

        processing-mode: Single
        operation: field-extract "TOTAL.C.AMOUNT"
    }

    field "CLOSING.BAL.TXT" {
        break-condition {
            break: End
        }

        alignment: Left
        comma-separator: false
        display-section: Footer
        position {
            column: 47
            line: + 5
        }

        processing-mode: Single
        operation: constant "\"Closing Balance : \""
    }

    field "CLOSING.BALANCE" {
        format: Currency "ENTRY.CCY" negative-pattern -# break-condition {
            break: End
        }

        length: 19
        alignment: Right
        comma-separator: true
        display-section: Footer
        position {
            column: 67
            line: + 5
        }

        processing-mode: Single
        operation: field-extract "RUNNING.BALANCE"
    }

    field "BC.PAGE" {
        alignment: Left
        comma-separator: false
        operation: break-line 59
    }

    field "CUST.NO" {
        alignment: Left
        comma-separator: false
        operation: field-extract "ACCOUNT.NUMBER"
        conversion: getFrom "ACCOUNT" "CUSTOMER.NO" false
    }

    attributes: "NO.ENQUIRY.FAVOURITES"
}